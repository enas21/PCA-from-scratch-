# -*- coding: utf-8 -*-
"""pca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6D46NvEaNtxaUR5vrz-z79RFVj94yUU
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(style='white')
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'
from sklearn import decomposition
from sklearn import datasets
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
# Drawing the embeddings
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from matplotlib import*
import matplotlib.pyplot as plt
from matplotlib.cm import register_cmap
from scipy import stats
from sklearn.decomposition import PCA as sklearnPCA
import seaborn
data=pd.read_csv('emails.csv')

data=data.drop(["Email No.","Prediction"],axis=1)

X_centered = data - np.mean(data , axis = 0)
X_centered_transpose = X_centered.transpose()
print(X_centered.shape)
print(X_centered_transpose.shape)
covariance=np.dot(X_centered_transpose, X_centered)/(X_centered.shape[0]-1)
print(covariance.shape)

print(covariance.shape)
#Calculating eigenvectors and eigenvalues on covariance matrix
eigen_values , eigen_vectors = np.linalg.eigh(covariance)
print(eigen_values , eigen_vectors)

sorted_index = np.argsort(eigen_values)[::-1]
 
sorted_eigenvalue = eigen_values[sorted_index]
#similarly sort the eigenvectors 
sorted_eigenvectors = eigen_vectors[:,sorted_index]

n_components = 2 #you can select any number of components.
eigenvector_subset = sorted_eigenvectors[:,0:n_components]
print(eigenvector_subset.shape)

fbar=np.dot(eigenvector_subset.transpose(),X_centered_transpose).transpose()
print(fbar.shape)
print(fbar)

Qbar=eigenvector_subset.transpose()
d=np.dot(fbar,Qbar)
mean=[]
for i in range(len(data)):
  mean.append(data.mean(axis=0))
f=d+mean

print(f.shape)

import numpy as np
from sklearn.decomposition import PCA
pca = decomposition.PCA(n_components=2)

pca.fit(data)
X_pca = pca.transform(data)
print(X_pca.shape)
print(X_pca)
print(pca.explained_variance_ratio_)